* Diseño de Software
Este repositorio contiene las prácticas de la asigatura de Diseño de Software de la Universidad De A Coruña en el grado de ingeniería informática segundo curso de 2021/2022

** Trabajo realizado por:
- Miguel López López
- Xoel Díaz Préstamo

** Contenido de cada entrega
Hay tres entregas separadas en diferentes carpetas que contienen projectos de IntelliJ con cada uno de los ejercicios separados en paquetes en las carpetas *src* y sus respectivos tests en las carpetas *test*.

*** Boletín 1
Todos los ejercicios están explicados en el pdf [[https://github.com/migueldeoleiros/DS-14-02/blob/main/Boletin_1_DS_21-22.pdf][Boletin_1_DS_21-22.pdf]]
**** [[https://github.com/migueldeoleiros/DS-14-02/tree/main/DS-14-02-B1/src/e1][Ejercicio 1]] Coteo de palabras y carácteres
EL ejercicio consistía en crear una clase *StringCount* con los siguientes métodos:
- *countWords*
  Cuenta el número de palabras en un String dado.
- *countChar*
  Cuenta el número de veces que se repite un caracter dado en un String dado.
- *contCharIgnoringCase*
  Cuenta el número de veces que se repite un caracter ya sea mayuscula o no en un String dado.
- *isPasswordSafe*
  Comprueba si un String cumple los requisitos para ser aceptado como contraseña

**** [[https://github.com/migueldeoleiros/DS-14-02/tree/main/DS-14-02-B1/src/e2][Ejercicio 2]] Descenso de pendientes
Dada una matriz con puntos(*.*) y almohadillas (*#*) donde los puntos representan vacios y las amohadillas representan árboles debemos contar cuantos árboles son encontrados por un esquiador recorriendo la matriz con dos estrategias diferentes.
***** Estrategia downTheSlope
El esquiador se moverá de izquierda a derecha pasando por todas las casillas
***** Estrategia JumpTheSlope
El esquiador se moverá de izquierda a derecha dando saltos y solo contaremos los árboles encontrados en las posiciones iniciales.

**** [[https://github.com/migueldeoleiros/DS-14-02/tree/main/DS-14-02-B1/src/e3][Ejercicio 3]] Melodías y notas
El ejercicio consistía en crear una clase *Melody* con los siguientes métodos: \\
A mayores nosotros creamos una clase auxiliar *Note*
***** Melody
Crea una instancia de Melody vacía.
***** addNote
Añade una nota dada al final de la melodía.
***** getNote
Devuelve la nota en una posición dada de la melodía.
***** getAccidental
Devuelve el accidental de una nota dada (si es bemol/sostenido)
***** getTime
Devuelve el tiempo que dura una nota.
***** size
Devuelve el número de notas en la melodía.
***** getDUration
Devuelve la duración de la melodía.
***** equals
Compara dos melodías teniendo en cuenta las posibles representaciones de una misma nota segun la teoría musical (DO#=Re♭ etc.)
***** hashcode
La representación en código de una melodía, teniendo en cuenta que dos melodías equivalentes según *equals* deben tener el mismo hashcode.
***** toString
La representación en String la melodía.


**** [[https://github.com/migueldeoleiros/DS-14-02/tree/main/DS-14-02-B1/src/e4][Ejercicio 4]] Calculadora por lotes
El ejercicio consistía en implementar una calculadora que funcione por lotes, donde primero se añaden las operaciones y después se ejecutan todas ellas y se devuelve el resultado. Teníamos que implementar las siguientes funciones:
***** cleanOperations
Borra el estado interno de la calculadora.
***** addOperation
Añade una operación al estado interno de la calculadora dando la operación y el nuevo numero o números a operar.
***** executeOperations
Ejecuta las operaciones, devuelve el resultado y borra el estado interno de la calculadora.
***** toString
Devuelve en un String las operaciones guardadas en la calculadora hasta ahora.
